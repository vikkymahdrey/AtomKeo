package com.agiledge.atom.dao.impl;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.Query;

import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Repository;

import com.agiledge.atom.config.files.OtherFunctions;
import com.agiledge.atom.config.files.SendMailFactory;
import com.agiledge.atom.constants.SettingsConstant;
import com.agiledge.atom.dao.intfc.DeviceDao;
import com.agiledge.atom.dto.EmployeeICEDTO;
import com.agiledge.atom.entities.Driver;
import com.agiledge.atom.entities.DriverLogin;
import com.agiledge.atom.entities.Employee;
import com.agiledge.atom.entities.EmployeeIce;
import com.agiledge.atom.entities.EmployeeImei;
import com.agiledge.atom.entities.Escort;
import com.agiledge.atom.entities.Shuttleposition;
import com.agiledge.atom.entities.TripDetail;
import com.agiledge.atom.entities.TripDetailsChild;
import com.agiledge.atom.entities.Tripshuttle;
import com.agiledge.atom.entities.Vehicle;
import com.agiledge.atom.entities.VehiclePosition;
import com.agiledge.atom.entities.VendorTripSheet;
import com.agiledge.atom.entities.VendorTripSheetEscort;
import com.agiledge.atom.entities.VendorTripSheetParent;
import com.agiledge.atom.mail.SendMail;
import com.agiledge.atom.sms.SendSMS;
import com.agiledge.atom.sms.SendSMSFactory;

@Repository("deviceDao")
public class DeviceDaoImpl extends AbstractDao implements DeviceDao {
	private static final Logger logger = Logger.getLogger(DeviceDaoImpl.class);
	private Object EmployeeIce;

	public JSONObject checkpassword(JSONObject json) {
		JSONObject returnobj = new JSONObject();
		try {
			Query q = getEntityManager().createQuery(
					"from Escort e where e.escortClock=:password");
			logger.debug("MObile Security password"
					+ json.get("password").toString());
			q.setParameter("password", json.get("password").toString());
			if (q.getResultList().size() == 1) {
				Escort e = (Escort) q.getResultList().get(0);
				Tripshuttle ts = new Tripshuttle();
				ts.setEscort(e);
				ts.setImei(json.get("IMEI").toString());
				ts.setStatus("started");
				ts.setTotaldistance("0");
				Tripshuttle rts = (Tripshuttle) update(ts);
				returnobj.put("ACTION", "START_TRIP");
				returnobj.put("RESULT", "TRUE");
				returnobj.put("MESSAGE", "SUCCESS");
				returnobj.put("TRIP_ID", rts.getId());
			} else {
				returnobj.put("ACTION", "START_TRIP");
				returnobj.put("RESULT", "FALSE");
				returnobj.put("MESSAGE", "ESCORT NOT FOUND!");
			}
			flush();
		} catch (Exception e) {
			returnobj.put("RESULT", "FALSE");
			returnobj.put("MESSAGE", e);
		}
		logger.debug("Statussss" + returnobj.get("RESULT").toString());
		return returnobj;
	}

	public JSONObject stoptrip(JSONObject json) {
		JSONObject returnobj = new JSONObject();
		try {
			Query q = getEntityManager().createQuery(
					"from Escort e where e.escortClock=:password");
			q.setParameter("password", json.get("password").toString());
			if (q.getResultList().size() == 1) {
				Tripshuttle ts = getEntityManager().find(Tripshuttle.class,
						Integer.parseInt(json.get("TRIP_ID").toString()));
				ts.setStatus("stopped");
				ts.setTripendtime(new Timestamp(new Date().getTime()));
				ts.setTotaldistance(json.get("TOTAL_DISTANCE").toString());
				update(ts);
				returnobj.put("RESULT", "TRUE");
				returnobj.put("MESSAGE", "SUCCESS");
				returnobj.put("ACTION", "STOP_TRIP");
			} else {
				returnobj.put("ACTION", "STOP_TRIP");
				returnobj.put("RESULT", "FALSE");
				returnobj.put("MESSAGE", "ESCORT NOT FOUND!");
			}
			flush();
		} catch (Exception e) {
			returnobj.put("RESULT", "FALSE");
			returnobj.put("MESSAGE", e);
		}
		return returnobj;
	}

	public JSONObject inserttrackingdata(JSONObject json) {
		JSONObject returnobj = new JSONObject();
		try {
			Shuttleposition sp = new Shuttleposition();
			sp.setDatetime(new Timestamp(new Date().getTime()));
			sp.setDistance(json.get("DISTANCE").toString());
			sp.setLat(json.get("LAT").toString());
			sp.setLng(json.get("LNG").toString());
			sp.setTripshuttle(getEntityManager().find(Tripshuttle.class,
					Integer.parseInt(json.get("TRIP_ID").toString())));
			sp.setStatus("run");
			update(sp);
			flush();
			returnobj.put("ACTION", "VEHICLE_TRACKING");
			returnobj.put("RESULT", "TRUE");
			returnobj.put("MESSAGE", "SUCCESS");
		} catch (Exception e) {
			returnobj.put("RESULT", "FALSE");
			returnobj.put("MESSAGE", e);
			returnobj.put("ACTION", "VEHICLE_TRACKING");
		}
		return returnobj;
	}

	public int startTrip(String tripId, String imei) {

		int retrival = 0;
		try {
			TripDetail t = getEntityManager().find(TripDetail.class, tripId);
			if (t.getVendorTripSheetParents().size() > 0) {
				VendorTripSheetParent vt = (VendorTripSheetParent) t
						.getVendorTripSheetParents().get(0);
				if (vt.getStatus() == null
						|| !vt.getStatus().equalsIgnoreCase("stopped")) {
					vt.setStatus("started");
					vt.setDownloadStatus("downloaded");
					vt.setOnTimeStatus("on time");
					vt.setVehicleImei(imei);
					Calendar calendar = Calendar.getInstance();
					vt.setStartTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
							+ calendar.get(Calendar.MINUTE) + ":"
							+ calendar.get(Calendar.SECOND));
					vt.setLogTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
							+ calendar.get(Calendar.MINUTE) + ":"
							+ calendar.get(Calendar.SECOND));

					VendorTripSheetParent vtsp = (VendorTripSheetParent) update(vt);
					if (vtsp != null) {
						retrival = 1;
					}
				}
			} else {
				VendorTripSheetParent vt = new VendorTripSheetParent();
				vt.setTripDetail(t);
				vt.setStatus("started");
				vt.setDownloadStatus("downloaded");
				vt.setEscort("NO");
				vt.setVehicleImei(imei);
				vt.setOnTimeStatus("on time");
				Calendar calendar = Calendar.getInstance();
				vt.setStartTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
						+ calendar.get(Calendar.MINUTE) + ":"
						+ calendar.get(Calendar.SECOND));
				vt.setLogTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
						+ calendar.get(Calendar.MINUTE) + ":"
						+ calendar.get(Calendar.SECOND));
				update(vt);
				List<TripDetailsChild> list = t.getTripDetailsChilds();
				VendorTripSheet vtp = null;
				for (TripDetailsChild tc : list) {

					System.out.println("here");
					VendorTripSheet v = new VendorTripSheet();
					v.setTripDetail(t);
					v.setEmployee(tc.getEmployee());
					v.setShowStatus("No Show");
					v.setInsertedOrder(BigInteger.valueOf(Long.parseLong(""
							+ tc.getRoutedOrder())));
					int randomPIN = (int) (Math.random() * 9000) + 1000;
					v.setKeypin("" + randomPIN);
					vtp = (VendorTripSheet) update(v);
				}
				if (vtp != null) {
					retrival = 1;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return retrival;
	}

	public int stopTrip(String tripId) {

		int retrival = 0;
		try {
			Calendar calendar = Calendar.getInstance();
			TripDetail t = getEntityManager().find(TripDetail.class, tripId);

			if (t.getVendorTripSheets().size() > 0
					&& t.getTripLog().equalsIgnoreCase("IN")) {

				List<VendorTripSheet> list = t.getVendorTripSheets();
				for (VendorTripSheet vts : list) {
					if (vts.getShowStatus().equalsIgnoreCase("show")) {
						vts.setCurStatus("OUT");
						vts.setOutTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
								+ calendar.get(Calendar.MINUTE) + ":"
								+ calendar.get(Calendar.SECOND));
						update(vts);
					}
				}
			}

			VendorTripSheetParent vt = (VendorTripSheetParent) t
					.getVendorTripSheetParents().get(0);
			vt.setStatus("stopped");
			vt.setDownloadStatus("downloaded");
			vt.setOnTimeStatus("on time");
			vt.setStopTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
					+ calendar.get(Calendar.MINUTE) + ":"
					+ calendar.get(Calendar.SECOND));
			vt.setLogTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
					+ calendar.get(Calendar.MINUTE) + ":"
					+ calendar.get(Calendar.SECOND));

			VendorTripSheetParent vtsp = (VendorTripSheetParent) update(vt);

			if (vtsp != null) {
				retrival = 1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retrival;

	}

	public int forceStopTrip(String tripId) {

		int retrival = 0;
		try {
			Calendar calendar = Calendar.getInstance();
			TripDetail t = getEntityManager().find(TripDetail.class, tripId);

			if (t.getVendorTripSheets().size() > 0
					&& t.getTripLog().equalsIgnoreCase("IN")) {

				List<VendorTripSheet> list = t.getVendorTripSheets();
				for (VendorTripSheet vts : list) {
					if (vts.getShowStatus().equalsIgnoreCase("show")) {
						vts.setCurStatus("OUT");
						vts.setOutTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
								+ calendar.get(Calendar.MINUTE) + ":"
								+ calendar.get(Calendar.SECOND));
						update(vts);
					}
				}
			}

			VendorTripSheetParent vt = (VendorTripSheetParent) t
					.getVendorTripSheetParents().get(0);
			vt.setStatus("stopped");
			vt.setDownloadStatus("downloaded");
			vt.setOnTimeStatus("on time");
			vt.setStopTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
					+ calendar.get(Calendar.MINUTE) + ":"
					+ calendar.get(Calendar.SECOND));
			vt.setLogTime(calendar.get(Calendar.HOUR_OF_DAY) + ":"
					+ calendar.get(Calendar.MINUTE) + ":"
					+ calendar.get(Calendar.SECOND));

			VendorTripSheetParent vtsp = (VendorTripSheetParent) update(vt);

			if (vtsp != null) {
				retrival = 1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retrival;

	}

	public int employeeCheckIn(String tripId, String empCode, double latitude,
			double longitude, long nuance) {

		int retrival = 0;
		try {
			String time = OtherFunctions.changeDateFormat(new Date(nuance),
					"HH:mm:ss");

			TripDetail t = getEntityManager().find(TripDetail.class, tripId);

			VendorTripSheet vt = null;
			if (t.getVendorTripSheets().size() > 0) {

				if (t.getTripLog().equalsIgnoreCase("IN")) {
					List<VendorTripSheet> list = t.getVendorTripSheets();
					for (VendorTripSheet vts : list) {
						if (vts.getEmployee().getId().equalsIgnoreCase(empCode)) {
							vts.setShowStatus("Show");
							vts.setCurStatus("IN");
							vts.setLatitude(latitude);
							vts.setLongitude(longitude);
							vts.setInTime(time);
							vt = (VendorTripSheet) update(vts);
							flush();
						}
					}
				}

				else {

					List<VendorTripSheet> list = t.getVendorTripSheets();
					for (VendorTripSheet vts : list) {
						if (vts.getEmployee().getId().equalsIgnoreCase(empCode)) {
							vts.setShowStatus("Show");
							vts.setCurStatus("IN");
							vts.setInTime(time);
							vt = (VendorTripSheet) update(vts);
							flush();
						}

					}
				}

				if (vt != null) {
					retrival = 1;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retrival;

	}

	public int employeeCheckOut(String tripId, String empCode, double latitude,
			double longitude, long nuance) {

		int retrival = 0;
		try {
			String time = OtherFunctions.changeDateFormat(new Date(nuance),
					"HH:mm:ss");

			TripDetail t = getEntityManager().find(TripDetail.class, tripId);

			VendorTripSheet vt = null;
			if (t.getVendorTripSheets().size() > 0) {

				if (t.getTripLog().equalsIgnoreCase("OUT")) {
					List<VendorTripSheet> list = t.getVendorTripSheets();
					for (VendorTripSheet vts : list) {
						if (vts.getEmployee().getId().equalsIgnoreCase(empCode)) {
							vts.setShowStatus("Show");
							vts.setCurStatus("OUT");
							vts.setLatitude(latitude);
							vts.setLongitude(longitude);
							vts.setOutTime(time);
							vt = (VendorTripSheet) update(vts);
						}
					}
				}

				else {

					List<VendorTripSheet> list = t.getVendorTripSheets();
					for (VendorTripSheet vts : list) {
						if (vts.getEmployee().getId().equalsIgnoreCase(empCode)) {
							vts.setShowStatus("Show");
							vts.setCurStatus("OUT");
							vts.setOutTime(time);
							vt = (VendorTripSheet) update(vts);
						}

					}
				}

				if (vt != null) {
					retrival = 1;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retrival;
	}

	public int updateGeoCode(String imei, String tripId, double latitude,
			double longitude, long nuance) {
		int retVal = 0;
		try {

			TripDetail t = getEntityManager().find(TripDetail.class, tripId);

			VehiclePosition vpret = null;
			if (!t.getVehiclePositions().isEmpty() && t.getVehiclePositions()!=null) {

				String vehicleStatus = t.getVehiclePositions()
						.get(t.getVehiclePositions().size() - 1).getLogstatus();
				VehiclePosition vp = new VehiclePosition();

				vp.setVehicle(t.getVehicleBean());
				vp.setLattitude(latitude);
				vp.setLongitude(longitude);
				if (vehicleStatus != null && vehicleStatus.equals("danger")) {
					vp.setLogstatus("danger");
				} else {
					vp.setLogstatus("run");
				}
				vp.setTripDetail(t);
				vp.setStatus("checkedin");
				vp.setDateTime(new java.sql.Timestamp(nuance));

				vpret = (VehiclePosition) update(vp);

			}

			else {
				VehiclePosition vp = new VehiclePosition();

				vp.setVehicle(t.getVehicleBean());
				vp.setLattitude(latitude);
				vp.setLongitude(longitude);
				vp.setLogstatus("run");
				vp.setTripDetail(t);
				vp.setStatus("checkedin");
				vp.setDateTime(new java.sql.Timestamp(nuance));

				vpret = (VehiclePosition) update(vp);

			}
			if (vpret != null) {
				retVal = 1;
			}

			List<VendorTripSheet> list = t.getVendorTripSheets();
			for (VendorTripSheet vts : list) {

				if ((vts.getLatitude() == 0 || vts.getLongitude() == 0)
						&& vts.getShowStatus().equalsIgnoreCase("show")) {

					vts.setLatitude(latitude);
					vts.setLongitude(longitude);
					update(vts);
				}
			}
			/*
			 * List<VendorTripSheetEscort> list1 =
			 * t.getVendorTripSheetEscorts(); for (VendorTripSheetEscort vte :
			 * list1) { if (vte.getInLatitude() == 0 || vte.getInLongitude() ==
			 * 0) { vte.setInLatitude(latitude); vte.setInLongitude(longitude);
			 * update(vte); } }
			 */
		} catch (Exception e) {
			logger.debug("error in update geocode dao" + e);

		}
		return retVal;
	}

	public int updateDistanceCovered(String tripId, double distanceCovered,
			long timeElapsed) {

		int retVal = 0;

		try {

			TripDetail t = getEntityManager().find(TripDetail.class, tripId);
			VendorTripSheetParent vtp = (VendorTripSheetParent) t
					.getVendorTripSheetParents().get(0);

			vtp.setDistanceCovered(distanceCovered);
			;
			vtp.setTimeElapsed(BigInteger.valueOf(timeElapsed));
			VendorTripSheetParent retvt = (VendorTripSheetParent) update(vtp);

			if (retvt != null) {

				retVal = 1;
			}

		} catch (Exception e) {
			System.out.println("Error in dao emp get out" + e);
		}

		return retVal;

	}

	public int logout(String imei) {
		int retval = 0;
		try {
			Query q = getEntityManager().createQuery(
					"from DriverLogin dl where dl.imeiNumber=:imei");
			q.setParameter("imei", imei);
			List<DriverLogin> list = q.getResultList();

			if (list.size() > 0) {
				for (DriverLogin dl : list) {
					dl.setStatus("logout");
					DriverLogin dlret = (DriverLogin) update(dl);
					if (dlret != null) {
						retval = 1;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retval;
	}

	public int checkUserOTP(String password, String imei) {

		int dId = 0;
		DriverLogin dl = null;
		try {

			TripDetail td = getTripDetailByPwd(password);
			if (td != null) {
				Driver d = td.getDriver();

				Date dt = new Date();

				dl = new DriverLogin();

				dl.setDriver(d);
				dl.setImeiNumber(imei);
				dl.setVehicle(td.getVehicleBean());
				dl.setStatus("logged");
				dl.setDatetime(new Timestamp(dt.getTime()));
				dl.setTripDetail(td);
				update(dl);
				dId = dl.getDriver().getId();
			}

		} catch (Exception e) {
			System.out.println("error : " + e);
		}
		return dId;

	}

	public TripDetail getTripDetailByPwd(String password) {

		Calendar cal1 = Calendar.getInstance();
		Calendar cal2 = Calendar.getInstance();
		cal1.add(Calendar.DATE, -3);
		cal2.add(Calendar.DATE, 3);

		Query q = getEntityManager()
				.createQuery(
						"from TripDetail td where td.driverPswd=:password and td.tripDate between :tripDate1 and :tripDate2 ");
		q.setParameter("password", password);
		q.setParameter("tripDate1", new Timestamp(cal1.getTimeInMillis()));
		q.setParameter("tripDate2", new Timestamp(cal2.getTimeInMillis()));

		List<TripDetail> list = q.getResultList();
		TripDetail td = null;
		if (list!=null && !list.isEmpty()) {
			td = list.get(0);
		}
		return td;
	}

	public TripDetail getTripByDriverImei(String imei) {
		// TODO Auto-generated method stub
		Query q = getEntityManager().createQuery(
				"from DriverLogin dl where dl.imeiNumber = :imei");
		q.setParameter("imei", imei);
		List<DriverLogin> list = q.getResultList();
		TripDetail td = null;
		DriverLogin dl = null;
		if (list.size() > 0) {
			for (DriverLogin dle : list) {
				if (dle.getStatus().equalsIgnoreCase("logged")) {
					dl = dle;
					td = dl.getTripDetail();
				}
			}
		}

		return td;
	}
	public TripDetail getTripById(String tripid) {
	
		
		TripDetail td = getEntityManager().find(TripDetail.class, tripid);

		return td;
	}
	public int setTripAsDownloaded(String tripid, String imei,
			String vehicleRegNo) {
		// TODO Auto-generated method stub
		System.out.println("trip id : " + tripid);
		TripDetail td = getEntityManager().find(TripDetail.class, tripid);
		VendorTripSheetParent vtsp = td.getVendorTripSheetParents().get(0);
		VendorTripSheetParent retvtsp = null;
		int retVal = 0;
		if (vtsp != null) {
			// "update vendor_trip_sheet_parent set downloadStatus='downloaded', vehicle_imei='"+imei+"', vehicleNo='"+vehicleNo+"'
			// whe
			if (td.getStatus() == null
					|| !td.getStatus().equalsIgnoreCase("started")
					|| !td.getStatus().equalsIgnoreCase("stopped")) {
				vtsp.setDownloadStatus("downloaded");
				vtsp.setVehicleImei(imei);
				vtsp.setVehicleNo(vehicleRegNo);
				retvtsp = (VendorTripSheetParent) update(vtsp);
				if (retvtsp != null) {
					System.out.println("Updated Status as downloaded");
				}
			}
		} else {
			System.out
					.println("Trackkkkkk......... inserting into vendor_trip_sheet_parent");
			VendorTripSheetParent vtspnew = new VendorTripSheetParent();
			vtspnew.setTripDetail(td);
			vtspnew.setVehicleImei(imei);
			vtspnew.setDownloadStatus("downloaded");
			vtspnew.setEscort(td.getSecurityStatus());
			vtspnew.setVehicleNo(vehicleRegNo);
			vtspnew.setStatus("initial");
			retvtsp = (VendorTripSheetParent) update(vtspnew);

			List<TripDetailsChild> list = td.getTripDetailsChilds();
			VendorTripSheet vtp = null;
			for (TripDetailsChild tc : list) {

				System.out.println("here");
				VendorTripSheet v = new VendorTripSheet();
				v.setTripDetail(td);
				v.setEmployee(tc.getEmployee());
				v.setShowStatus("No Show");
				v.setInsertedOrder(BigInteger.valueOf(Long.parseLong(""
						+ tc.getRoutedOrder())));
				int randomPIN = (int) (Math.random() * 9000) + 1000;
				v.setKeypin("" + randomPIN);
				vtp = (VendorTripSheet) update(v);
			}
		}

		if (retvtsp != null) {
			retVal = 1;
		}
		;
		return retVal;
	}

	/*
	 * public int updateGeoCodePassive(String imei, double latitude, double
	 * longitude, long nuance) { int retVal = 0; try {
	 * 
	 * Device d=getEntityManager().find(Device.class, imei);
	 * 
	 * 
	 * 
	 * pst = con .prepareStatement(
	 * "update full_vehicle_position,device_vehicle dv, device d  set full_vehicle_position.date_time=?, full_vehicle_position.lattitude=?, full_vehicle_position.longitude=?    where full_vehicle_position.dvId=dv.id and  dv.status='active' and dv.deviceId=d.id and  d.imei='"
	 * +imei+"' ");
	 * 
	 * 
	 * 
	 * //System.out.println("Time (stationary) :" +new
	 * java.sql.Timestamp(nuance).toGMTString()); pst.setTimestamp(1,new
	 * java.sql.Timestamp( nuance));
	 * 
	 * pst.setDouble(2, latitude); pst.setDouble(3, longitude);
	 * 
	 * 
	 * 
	 * } catch (Exception e) { logger.debug("error in update geocode dao" + e);
	 * 
	 * } return retVal; }
	 */

	// emp app starts here

	public String mobileNocheck(String mobileno) {

		String result = "false";

		try {

			Query q = getEntityManager()
					.createQuery(
							"FROM Employee e WHERE (e.contactNumber1=:mobile OR e.contactNumber2=:mobile) AND  e.active=1");

			q.setParameter("mobile", mobileno);

			List<Employee> list = q.getResultList();

			if (list != null && !list.isEmpty()) {
				result = "true";
			}
		} catch (Exception e) {
			System.out.println("error in mobileNocheck");
			e.printStackTrace();
		}

		return result;
	}

	public String insertOTP(String mobileNo, String imei, String otp) {
		int returnInt = 0;

		try {

			Query eq = getEntityManager()
					.createQuery(
							"FROM Employee e WHERE (e.contactNumber1=:mobile OR e.contactNumber2=:mobile) AND  e.active=1");

			eq.setParameter("mobile", mobileNo);

			List<Employee> elist = eq.getResultList();

			if (elist != null && !elist.isEmpty()) {
				Employee e = elist.get(0);

				EmployeeImei eiret = null;
				Query q = getEntityManager().createQuery(
						"FROM EmployeeImei   WHERE  imei=:imei");

				q.setParameter("imei", imei);

				List<EmployeeImei> list = q.getResultList();

				if (list != null && !list.isEmpty()) {
					EmployeeImei ei = list.get(0);
					otp = ei.getOtp();
					ei.setEmployee(e);
					eiret = (EmployeeImei) update(ei);
				}

				else {
					EmployeeImei eimei = new EmployeeImei();

					eimei.setEmployee(e);
					eimei.setImei(imei);
					eimei.setOtp(otp);
					eimei.setStatus("a");
					eiret = (EmployeeImei) update(eimei);
				}
				if (eiret != null) {
					returnInt = 1;
				}

				if (returnInt > 0) {

					String msg = "Dear "
							+ e.getDisplayname()
							+ ", <br/> <br/> "
							+ "Your One Time Password(OTP) is "
							+ otp
							+ ". Please use this OTP to login to ATOm safetravel application."
							+ "<br/><br/>"
							+ "Regards,<br/>"
							+ "Transport Team."
							+ " <br/><br/>"
							+ "<br/> <i><u>Note:</u> This is a system generated message. Please do not reply.</i>";

					SendSMS sendSMS = SendSMSFactory.getSMSInstance();
					sendSMS.send(mobileNo, msg);

					SendMail sendmail = SendMailFactory.getMailInstance();
					sendmail.send(e.getEmailAddress(),
							"Mobile App Registration", msg);

				}

			}

		} catch (Exception e) {
			System.out.println("error in insertOTP");
			e.printStackTrace();
		}
		return otp;
	}

	public Employee getEmployeeDetails(String imei) {

		Query q = getEntityManager().createQuery(
				"FROM EmployeeImei WHERE imei=:imei");

		q.setParameter("imei", imei);

		EmployeeImei ei = (EmployeeImei) q.getResultList().get(0);

		return ei.getEmployee();

	}

	public TripDetail getTripDetails(String imei, String auth) {

		Employee emp=getEmployeeDetails(imei);		
		TripDetail trip=null;
		Calendar cal1 = Calendar.getInstance();
		Calendar cal2 = Calendar.getInstance();
		cal1.add(Calendar.DATE, -1);
	

		Query q = getEntityManager()
				.createQuery(
						" from TripDetail td left outer join td.tripDetailsChilds tdc left outer join td.vendorTripSheetParents vtp where tdc.employee=:empid and td.tripDate between :tripDate1 and :tripDate2 and vtp.status!='initial' order by td.tripDate,td.tripTime desc");
		
		System.out.println("date"+cal1);
		q.setParameter("tripDate1", new Timestamp(cal1.getTimeInMillis()));
		q.setParameter("tripDate2", new Timestamp(cal2.getTimeInMillis()));
		q.setParameter("empid",emp);
		q.setMaxResults(1);
		List<TripDetail> obj=q.getResultList();
		if(obj !=null && !obj.isEmpty()){
			trip=(TripDetail) obj.get(0);
		
		}
		
		
		
		
		

//		List<TripDetail> list = q.getResultList();
//		outerloop: for (int i = list.size() - 1; i >= 0; i--) {
//
//			TripDetail td = list.get(i);
//			VendorTripSheetParent vtp = td.getVendorTripSheetParents().get(0);
//			if (!vtp.getStatus().equalsIgnoreCase("initial")) {
//				List<TripDetailsChild> tclist = td.getTripDetailsChilds();
//				for (TripDetailsChild tc : tclist) {
//					if (tc.getEmployee().getId().equalsIgnoreCase(emp.getId())) {
//						emptrip = td;
//						break outerloop;
//					}
//				}
//			}
//
//			if (vtp.getStatus().equalsIgnoreCase("stopped")) {
//				emptrip = null;
//			}
//
//		}

		return trip;
	}

	public String checkImei(String imei) {
		String flag = "false";

		try {

			Query q = getEntityManager()
					.createQuery(
							"FROM EmployeeImei WHERE imei=:imei and status='a' and authenticate='YES'");

			q.setParameter("imei", imei);

			EmployeeImei ei = (EmployeeImei) q.getResultList().get(0);

			if (ei != null ) {
				flag = "true";

			}
		} catch (Exception e) {

			System.out.println("error in checkImei");
			e.printStackTrace();
		}

		return flag;
	}

	public JSONObject getVehiclePosition(String tripid) {
		JSONObject json = new JSONObject();

		try {

			TripDetail t = getEntityManager().find(TripDetail.class, tripid);

			if (t != null) {

				if (t.getVehiclePositions() != null && !t.getVehiclePositions().isEmpty()) {

					String date_time = t.getVehiclePositions()
							.get(t.getVehiclePositions().size() - 1)
							.getLogstatus();
					String latitude = t.getVehiclePositions()
							.get(t.getVehiclePositions().size() - 1)
							.getLattitude()
							+ "";
					String longitude = t.getVehiclePositions()
							.get(t.getVehiclePositions().size() - 1)
							.getLongitude()
							+ "";
					json.put("DATE_TIME", date_time);
					json.put("LAT", latitude);
					json.put("LONG", longitude);
				} else {
					json.put("DATE_TIME", "");
					json.put("LAT", "");
					json.put("LONG", "");
				}
			} else {
				json.put("DATE_TIME", "");
				json.put("LAT", "");
				json.put("LONG", "");
			}
			String empquery = "select e.id from trip_details_child tdc join employee e on e.id=tdc.employeeid join vendor_trip_sheet vt on vt.tripid=tdc.tripid and vt.employeeid=e.id and vt.showstatus='Show' where tdc.tripid=?";

			List<VendorTripSheet> list = t.getVendorTripSheets();
			int i = 0;
			for (VendorTripSheet vt : list) {

				i++;
				json.put("BOARD_ID" + i, vt.getEmployee().getId());
			}
			json.put("COUNT", i);

			VendorTripSheetEscort vesc = t.getVendorTripSheetEscorts().get(0);

			if (vesc != null ) {
				json.put("ESCORT_STATUS", vesc.getShowStatus());

			} else {
				json.put("ESCORT_STATUS", "NIL");
			}

		} catch (Exception e) {

			System.out.println("error in getVehiclePosition");
			e.printStackTrace();
		}
		return json;
	}

	public JSONObject getVehiclePosition1() {
		JSONObject json = new JSONObject();

		String count = "0";

		try {

			Date today = Calendar.getInstance().getTime();

			Calendar cal1 = Calendar.getInstance();
			Calendar cal2 = Calendar.getInstance();
			cal1.add(Calendar.DATE, -1);
			cal2.add(Calendar.DATE, 1);

			Query q = getEntityManager()
					.createQuery(
							"from TripDetail td where td.tripDate between :tripDate1 and :tripDate2 ");

			q.setParameter("tripDate1", new Timestamp(cal1.getTimeInMillis()));
			q.setParameter("tripDate2", new Timestamp(cal2.getTimeInMillis()));

			List<TripDetail> list = q.getResultList();

			if(list!=null && !list.isEmpty())
			{
			for (TripDetail td : list) {

				if (td.getVendorTripSheetParents().get(0).getStatus()
						.equalsIgnoreCase("started")) {

					if (td.getVehiclePositions() != null) {

						String latitude = td.getVehiclePositions()
								.get(td.getVehiclePositions().size() - 1)
								.getLattitude()
								+ "";
						String longitude = td.getVehiclePositions()
								.get(td.getVehiclePositions().size() - 1)
								.getLongitude()
								+ "";

						json.put("LAT", latitude);
						json.put("LONG", longitude);

					}

					json.put("REGNO", td.getVendorTripSheetParents().get(0)
							.getVehicleNo());
					json.put("TRIPID", td.getId());

					List<VendorTripSheet> vlist = td.getVendorTripSheets();
					int i = 0;
					for (VendorTripSheet vt : vlist) {

						i++;
						json.put("EMP_NAME" + i, vt.getEmployee()
								.getDisplayname());
						json.put("GENDER" + i, vt.getEmployee().getGender());

					}
					json.put("EMPS_COUNT", i);

				}
			}
			}

		} catch (Exception e) {

			System.out.println("error in getVehiclePosition1");
			e.printStackTrace();
		}

		return json;
	}

	public JSONObject getEmpsBoarded(String tripid) {
		JSONObject json = new JSONObject();
		try {

			TripDetail t = getEntityManager().find(TripDetail.class, tripid);

			if (t != null) {

				List<VendorTripSheet> list = t.getVendorTripSheets();
				int i = 0;
				for (VendorTripSheet vt : list) {

					i++;
					json.put("BOARD_ID" + i, vt.getEmployee().getId());
				}
				json.put("COUNT", i);

			}
		} catch (Exception e) {

			System.out.println("error in getEmpsBoarded");
			e.printStackTrace();
		}
		return json;
	}

	public int updateAuthenticate(String Imei) {

		int returnInt = 0;
		try {

			EmployeeImei eret = null;
			Query q = getEntityManager().createQuery(
					"from EmployeeImei  where imei =:imei ");

			q.setParameter("imei", Imei);

			EmployeeImei ei = (EmployeeImei) q.getResultList().get(0);
			ei.setAuthenticate("YES");
			eret = (EmployeeImei) update(ei);
			if (eret != null) {
				returnInt = 1;
			}

		} catch (Exception e) {

			System.out.println("error in updateAuthenticate");
			e.printStackTrace();
		}
		return returnInt;
	}

	public int insertICEdetails(EmployeeICEDTO dto) {
		int returnint = 0;
		try {

			EmployeeIce eret = null;
			Query q = getEntityManager().createQuery(
					"from EmployeeIce  where empid =:empid ");

			q.setParameter("empid", dto.getEmpid());

			EmployeeIce ei = (EmployeeIce) q.getResultList().get(0);

			if (ei != null) {

				ei.setContactName1(dto.getContact_name1());
				ei.setContactNumber1(dto.getContact_number1());
				ei.setContactEmail1(dto.getContact_email1());
				ei.setContactName2(dto.getContact_name2());
				ei.setContactNumber2(dto.getContact_number2());
				ei.setContactEmail2(dto.getContact_email2());
				ei.setStatus("a");
				eret = (EmployeeIce) update(ei);

			} else {

				EmployeeIce einew = new EmployeeIce();
				einew.setEmpid(BigInteger.valueOf(Long.valueOf(dto.getEmpid())));
				einew.setContactName1(dto.getContact_name1());
				einew.setContactName1(dto.getContact_name1());
				einew.setContactNumber1(dto.getContact_number1());
				einew.setContactEmail1(dto.getContact_email1());
				einew.setContactName2(dto.getContact_name2());
				einew.setContactNumber2(dto.getContact_number2());
				einew.setContactEmail2(dto.getContact_email2());
				einew.setStatus("a");
				eret = insertICEinfo(einew);

			}

			if (eret != null) {
				returnint = 1;
			}

		} catch (Exception e) {
			System.out.println("error in insertICEdetails");
			e.printStackTrace();
		}
		return returnint;
	}

	public EmployeeIce insertICEinfo(EmployeeIce einew) {
		persist(einew);
		flush();
		return einew;
	}

	public EmployeeICEDTO getICEdetailsbyID(String empid) {

		EmployeeICEDTO dto = null;
		try {
			dto = new EmployeeICEDTO();
			Query q = getEntityManager().createQuery(
					"from EmployeeIce  where empid =:empid ");

			q.setParameter("empid", dto.getEmpid());

			List<EmployeeIce> list = q.getResultList();

			if (list != null && !list.isEmpty()) {
				EmployeeIce ei = list.get(0);

				dto.setContact_name1(ei.getContactName1());
				dto.setContact_number1(ei.getContactNumber1());
				dto.setContact_email1(ei.getContactEmail1());
				dto.setContact_name2(ei.getContactName2());
				dto.setContact_number2(ei.getContactNumber2());
				dto.setContact_email2(ei.getContactEmail2());
			}

		} catch (Exception e) {
			System.out.println("error in getICEdetailsbyID");
			e.printStackTrace();
		}
		return dto;

	}

	public JSONObject getLiveTrips() {
		// TODO Auto-generated method stub
		
		JSONObject json = new JSONObject();
				
		JSONArray LAT = new JSONArray();
		JSONArray LONG = new JSONArray();
		JSONArray REGNO = new JSONArray();
		JSONArray TRIPTYPE=new JSONArray();
		JSONArray TRIPCODE = new JSONArray();
		JSONArray LOGSTATUS = new JSONArray();
		JSONArray ESCORT = new JSONArray();
		JSONArray LADYCOUNT = new JSONArray();
		JSONArray EMPINCOUNT = new JSONArray();
		JSONArray emps=new JSONArray();
		JSONArray empsstatus=new JSONArray();
	
		Timestamp[] ts;
		
		Query q=getEntityManager().createQuery("select distinct(ts.id) from Tripshuttle ts where date(ts.tripstarttime)=:curdate group by ts.imei");
		q.setParameter("curdate", new Date());
		List<Object> imeis=q.getResultList();
		Query trackingdataquery=getEntityManager().createQuery("from Shuttleposition sp where sp.tripshuttle.id=:shuttleid and date(sp.datetime)=:datetime order by sp.datetime desc");
		Query vehiclequery=getEntityManager().createQuery("from Vehicle v where v.vehicleimei=:imei");
		vehiclequery.setMaxResults(1);
		trackingdataquery.setMaxResults(1);
		ts=new Timestamp[imeis.size()];
		int i=0;
		for(Object o:imeis){
			int imei=(Integer) o;
			trackingdataquery.setParameter("shuttleid",imei);
			trackingdataquery.setParameter("datetime", new Timestamp(new Date().getTime()));
			List<Shuttleposition> list=trackingdataquery.getResultList();
			if(list!=null && !list.isEmpty()){
			Shuttleposition sp=list.get(0);
			vehiclequery.setParameter("imei", sp.getTripshuttle().getImei());
		   if(vehiclequery.getResultList().size()>0){
			Vehicle v=(Vehicle) vehiclequery.getResultList().get(0);
			LAT.add(sp.getLat());
			LONG.add(sp.getLng());
			LOGSTATUS.add(sp.getStatus());
			REGNO.add(v.getRegNo());
			TRIPTYPE.add("SHUTTLE");
			ESCORT.add("NO");
			TRIPCODE.add("Shuttle Trip");// we can't have tripcode in shuttle
			emps.add("");// we can't get emp data in shuttle
			empsstatus.add("");// we can't decide emp status in shuttle 
			LADYCOUNT.add(0);
			EMPINCOUNT.add(0);
			
			
			ts[i]=sp.getDatetime();
			i++;
		   }
		   }
		}
		Query tripquery=getEntityManager().createQuery("select distinct(vp.vehicle.id) from VehiclePosition vp where date(vp.dateTime)=:datetime");
		tripquery.setParameter("datetime", new Date());
		Query livequery=getEntityManager().createQuery("from VehiclePosition vp where date(vp.dateTime)=:datetime and vp.vehicle.id=:vehicleid order by vp.dateTime desc");
		livequery.setMaxResults(1);
		livequery.setParameter("datetime", new Date());
		List<Object> vehicles=tripquery.getResultList();
		for(Object o:vehicles){
			int vehicleid=(Integer) o;
			livequery.setParameter("vehicleid", vehicleid);
			List<VehiclePosition> vehlist=livequery.getResultList();
			if(vehlist!=null && !vehlist.isEmpty() ){
			VehiclePosition lvp=vehlist.get(0);
			//for(int i1=0;i1<vehicleno.size();i1++){
				//System.out.println(""+vehicleno.get(i1).toString());
				/*if(vehicleno.get(i1).toString().equals(lvp.getVehicle().getRegNo())&&ts[i1].before(lvp.getDateTime())){
					lats.remove(i1);
					lngs.remove(i1);
					status.remove(i1);
					vehicleno.remove(i1);
					triptype.remove(i1);*/
					LAT.add(""+lvp.getLattitude());
					LONG.add(""+lvp.getLongitude());
					LOGSTATUS.add(lvp.getLogstatus());
					REGNO.add(lvp.getVehicle().getRegNo());
					ESCORT.add("YES");
					if(!SettingsConstant.comp.equalsIgnoreCase("keo"))
					{
						ESCORT.add(lvp.getTripDetail().getSecurityStatus());
					}
					for(VendorTripSheet vtp:lvp.getTripDetail().getVendorTripSheets()){
						emps.add(vtp.getEmployee().getDisplayname());
						empsstatus.add(vtp.getShowStatus());
						int ladyInCount=0;
						int empInCount=0;
						
						if(vtp.getCurStatus().equalsIgnoreCase("IN"))
						{  
							empInCount++;
							if(vtp.getEmployee().getGender().equalsIgnoreCase("F"))
							{
								ladyInCount++;	
							}
						}
						
						
						LADYCOUNT.add(ladyInCount);
						EMPINCOUNT.add(empInCount);
					}
					TRIPTYPE.add("TRIP");
					TRIPCODE.add(lvp.getTripDetail().getTripCode());
					
				//}	
			}
			
			
		}
		
	
		
		
	
		flush();
		
		
		
		
		json.put("LAT", LAT);
		json.put("LONG", LONG);
		json.put("REGNO", REGNO);
		json.put("TRIPTYPE", TRIPTYPE);
		json.put("TRIPCODE", TRIPCODE);
		json.put("LOGSTATUS", LOGSTATUS);
		json.put("LADYCOUNT", LADYCOUNT);
		json.put("EMPINCOUNT", EMPINCOUNT);
		json.put("ESCORT", ESCORT);
		json.put("EMPS",emps);
		json.put("EMPSTATUS",empsstatus);
		
		return json;
			
			
		
	}

	

		/*	
	public int panicdeactivated(String imei, String empid, String tripid) {
		int returnint = 0;

		try {
			String panicquery = "UPDATE EMPLOYEE_PANIC SET STATUS=? WHERE EMPID=? AND IMEI=? AND TRIPID=?";
			pst = con.prepareStatement(panicquery);
			pst.setString(1, "deactivated");
			pst.setString(2, empid);
			pst.setString(3, imei);
			pst.setString(4, tripid);
			returnint = pst.executeUpdate();

		} catch (Exception e) {
			System.out.println("error in panic deactivated");
			e.printStackTrace();
		}
		return returnint;
	}*/

}
