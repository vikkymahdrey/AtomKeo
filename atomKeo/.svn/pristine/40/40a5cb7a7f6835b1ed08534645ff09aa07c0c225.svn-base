package com.agiledge.atom.service.impl;

import java.util.Calendar;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.agiledge.atom.dao.intfc.SchedulingDao;
import com.agiledge.atom.entities.Atsconnect;
import com.agiledge.atom.entities.EmployeeSchedule;
import com.agiledge.atom.entities.EmployeeScheduleAlter;
import com.agiledge.atom.entities.EmployeeSubscription;
import com.agiledge.atom.service.intfc.SchedulingService;

@Service
public class SchedulingServiceImpl implements SchedulingService {
	
	
	private static Logger logger = Logger.getLogger(SchedulingServiceImpl.class);
	
	@Autowired
	private SchedulingDao schedulingDao;
	
	public List<EmployeeSubscription> getAllSubscribedEmployeeDetails() throws Exception{
		return schedulingDao.getAllSubscribedEmployeeDetails();
	}

	public EmployeeSubscription getSubscriptionDetailsById(String subsId) throws Exception {
		
		return schedulingDao.getSubscriptionDetailsById(subsId);
	}

	public Atsconnect getProjectById(String projectId) throws Exception {
		// TODO Auto-generated method stub
		return schedulingDao.getProjectById(projectId);
	}

	public List<EmployeeScheduleAlter> getAlterSchDetails() throws Exception {
		// TODO Auto-generated method stub
		return schedulingDao.getAlterSchDetails();
	}

	public void insertIntoEmployeeSchedule(EmployeeSchedule empSchedule, String weekOffStatus) throws Exception {
		
		logger.debug("inserting into employee schedule");
		schedulingDao.insertIntoEmployeeSchedule(empSchedule);

		// empSchedule = schedulingDao.getscheduleDetailsById(empSchedule.getId());
				
		EmployeeScheduleAlter empSchAlter=null;
				
		
		Calendar fromDate = Calendar.getInstance();
		Calendar toDate = Calendar.getInstance();
		Calendar tempDate = Calendar.getInstance();
		try {
			/*DateFormat formatter;
			formatter = new SimpleDateFormat("dd/MM/yyyy");*/
			if (empSchedule.getId()!=null && weekOffStatus.equalsIgnoreCase("on")) {
					fromDate.setTime(empSchedule.getFromDate());
						toDate.setTime(empSchedule.getToDate());
						int i=0;
					while (fromDate.getTimeInMillis() <= toDate.getTimeInMillis()) {

						tempDate = fromDate;
						if (tempDate.get(Calendar.DAY_OF_WEEK) == 1
								|| tempDate.get(Calendar.DAY_OF_WEEK) == 7) {
							logger.debug("It's a week-off");
							empSchAlter=new EmployeeScheduleAlter();
							empSchAlter.setEmployeeSchedule(empSchedule);
							empSchAlter.setEmployee(empSchedule.getEmployee2());
							empSchAlter.setStatus("new");
							empSchAlter.setDate(tempDate.getTime());
							empSchAlter.setLoginTime("weekly off");
							empSchAlter.setLogoutTime("weekly off");
							logger.debug("inserting into employee schedule alter");
							schedulingDao.insertEmpWeekOff(empSchAlter);
							logger.debug("inserted into employee schedule alter");
						}
						fromDate.add(Calendar.DATE, 1);
					}
			}		
	} catch(Exception ex) {
		           ex.printStackTrace();
				}
	
		
		/*try {
			if (weekOffStatus.equalsIgnoreCase("on") && empSchedule.getId()!=null) {
				Date fromDate = empSchedule.getFromDate();	
				Date toDate = empSchedule.getToDate();
				Date tempDate = null;
				while(fromDate.compareTo(toDate) <= 0) {
						tempDate = fromDate;
						System.out.println("In Out from IF TempDatettt");
						if (tempDate.getDay() == 0
								|| tempDate.getDay() == 6) {
							System.out.println("In IF TempDatettt");
							empSchAlter=new EmployeeScheduleAlter();
							empSchAlter.setEmployeeSchedule(empSchedule);
							empSchAlter.setEmployee(empSchedule.getEmployee2());
							empSchAlter.setStatus("new");
							empSchAlter.setDate(tempDate);
							empSchAlter.setLoginTime("weekly off");
							empSchAlter.setLogoutTime("weekly off");
							schedulingDao.insertEmpWeekOff(empSchAlter);
						}
						 fromDate.setDate(fromDate.getDate()+1);
						
					}
				}
			
			
			
		} catch(Exception ex) {
           ex.printStackTrace();
		}
				
	}*/
	}


	public EmployeeSchedule getScheduleDetailsById(String scheduleId) throws Exception {

		return schedulingDao.getscheduleDetailsById(scheduleId);
	}

	/*public ArrayList<SchedulingDto> getSubscribedEmployeeDetailsByManger(long managerId, long delegaterId, String site, String employeeFilter);
	public ArrayList<SchedulingDto> getSubscribedEmployeeDetailsByspoc(	long spocid , String site);
	public ArrayList<SchedulingDto> getAllSubscribedEmployeeDetailsByManger(long managerId);
	public ArrayList<SchedulingDto> getAllSubscribedEmployeeDetails(String site);
	public int setScheduleEmployees(ArrayList<SchedulingDto> scheduleEmpList);
	private void auditLogEntryforcreateschedule(int autoincNumber,String subcriptionEmpModule, int changedBy,String workflowStateEmpty, String workflowStateSubPending,	String auditLogCreateAction);
	public List<SchedulingDto> getSchedulingDetailsWhoAreAboutToExpiry(String curDate);
	public Date getFirstSchedulingFromDate(String subid);
	public Date getLastSchedulingToDate(String subid);
	public ArrayList<ScheduleAlterDto> getEmployeesWeeklyOff(ArrayList<SchedulingDto> scheduleEmpList);
	public boolean hasNoSchedule(String subscriptionId);
	public int uploadSchedule(ArrayList<SchedulingDto> dtoList, String changedBy);
	public ArrayList<String> getMessageList();
	public void setMessageList(ArrayList<String> messageList);
	public String getMessage();
	public void setMessage(String message);
	public SchedulingDto getDetailsForSchedule(String employeeId);
	public long scheduleSelf(SchedulingDto schedulingEmpDto);
	public LinkedHashMap<String, ArrayList<SchedulingDto>> getScheduleOfEmpForDownload(String fromDate, String toDate, String site);
	public ArrayList<SchedulingDto> getEmployeesHavingNoSchedule(String fromDate, String toDate, String site);*/

}
